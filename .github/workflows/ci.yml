name: CI

on:
  push:
    branches: ["main"]
    paths:
      - 'app/**'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'app/**'
      - 'Dockerfile'
      - '.github/workflows/ci.yml'

# Add explicit permissions to the GITHUB_TOKEN
permissions:
  contents: read
  security-events: write
  actions: read

# Cancel in-progress runs when a new workflow with the same ref is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Python environment
    runs-on: ubuntu-latest
    outputs:
      python-cache-hit: ${{ steps.python-cache.outputs.cache-hit }}
      deps-cache-hit: ${{ steps.deps-cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: 'app/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt flake8 bandit safety pytest pytest-cov pytest-xdist
  
  checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        check: [lint, bandit, safety]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: 'app/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety

      - name: Run Linting (flake8)
        if: matrix.check == 'lint'
        run: flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Bandit Security Scan
        if: matrix.check == 'bandit'
        run: bandit -r app/ -c pyproject.toml || true

      - name: Run Safety Dependency Scan
        if: matrix.check == 'safety'
        run: safety check -r app/requirements.txt || true

  test:
    name: Run tests with coverage
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'
          cache-dependency-path: 'app/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt pytest pytest-cov pytest-xdist

      - name: Run pytest in parallel with increased workers
        run: pytest app/tests/ -n auto --dist=loadfile --cov=app --cov-report=xml
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # First create a buildx builder explicitly
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest
          buildkitd-flags: --debug

      # Use GitHub cache for Docker layers
      - name: Docker Build Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'app/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: demo-app:latest
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: false

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Run Trivy scan
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: demo-app:latest
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          timeout: 10m0s

      # Upload Trivy scan results
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy
